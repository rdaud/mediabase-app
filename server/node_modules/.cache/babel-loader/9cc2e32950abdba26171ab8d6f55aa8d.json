{"ast":null,"code":"import _slicedToArray from\"/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React from'react';import{useAsyncDebounce}from'react-table';import{Select,Search}from'../../../../components';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var filterTypes=function filterTypes(){return/*#__PURE__*/React.memo({// Add a new fuzzyTextFilterFn filter type.\n// fuzzyText: fuzzyTextFilterFn,\n// Or, override the default text filter to use\n// \"startWith\"\ntext:function text(rows,id,filterValue){return rows.filter(function(row){var rowValue=row.values[id];return rowValue!==undefined?String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()):true;});}},[]);};export function SelectColumnFilter(_ref){var _ref$userColumns=_ref.userColumns,filterValue=_ref$userColumns.filterValue,id=_ref$userColumns.id,setFilter=_ref$userColumns.setFilter,preFilteredRows=_ref$userColumns.preFilteredRows;// Calculate the options for filtering\n// using the preFilteredRows\nvar options=React.useMemo(function(){var options=new Set();preFilteredRows.forEach(function(row){options.add(row.values[id]);});return _toConsumableArray(options.values());},[id,preFilteredRows]);// Capitalize 1st letter of the ID\nvar capitalizedId=id;capitalizedId=capitalizedId[0].toUpperCase()+capitalizedId.substring(1);// Render a multi-select box\nreturn/*#__PURE__*/_jsx(Select,{prompt:capitalizedId,variation:\"outline\",colorMode:\"dark\",value:filterValue,options:options,onChange:function onChange(e){console.log(e);setFilter(e||undefined);}})//   <select\n//     value={filterValue}\n//     onChange={e => {\n//         console.log(e.target.value)\n//       setFilter(e.target.value || undefined)\n//     }}\n//   >\n//     <option value=\"\">{capitalizedId}</option>\n//     {options.map((option, i) => (\n//       <option key={i} value={option}>\n//         {option}\n//       </option>\n//     ))}\n//   </select>\n// )\n;}// Define a default UI for filtering\nexport function DefaultColumnFilter(_ref2){var _ref2$column=_ref2.column,filterValue=_ref2$column.filterValue,preFilteredRows=_ref2$column.preFilteredRows,setFilter=_ref2$column.setFilter;var count=preFilteredRows.length;return/*#__PURE__*/_jsx(\"input\",{value:filterValue||'',onChange:function onChange(e){setFilter(e.target.value||undefined);// Set undefined to remove the filter entirely\n},placeholder:\"Search \".concat(count,\" records...\"),style:{// Don't display the default filter UI when using global filter\ndisplay:'none'}});}// Define a default UI for global filtering\nexport function GlobalFilter(_ref3){var preGlobalFilteredRows=_ref3.preGlobalFilteredRows,globalFilter=_ref3.globalFilter,setGlobalFilter=_ref3.setGlobalFilter;var count=preGlobalFilteredRows.length;var _React$useState=React.useState(globalFilter),_React$useState2=_slicedToArray(_React$useState,2),value=_React$useState2[0],setValue=_React$useState2[1];var _onChange=useAsyncDebounce(function(value){setGlobalFilter(value||undefined);},200);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Search,{onChange:function onChange(e){setValue(e.target.value);_onChange(e.target.value);},filterText:value||\"\"})})//   <span>\n//     Buscar:{' '}\n//     <input\n//       value={value || \"\"}\n//       onChange={e => {\n//         setValue(e.target.value);\n//         onChange(e.target.value);\n//       }}\n//       placeholder={`nome, cliente...`}\n//       style={{\n//         fontSize: '1rem',\n//         border: '0',\n//       }}\n//     />\n//   </span>\n;}","map":{"version":3,"sources":["/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/client/src/pages/Home/pageComponents/CampaignsTable/filters.js"],"names":["React","useAsyncDebounce","Select","Search","filterTypes","memo","text","rows","id","filterValue","filter","row","rowValue","values","undefined","String","toLowerCase","startsWith","SelectColumnFilter","userColumns","setFilter","preFilteredRows","options","useMemo","Set","forEach","add","capitalizedId","toUpperCase","substring","e","console","log","DefaultColumnFilter","column","count","length","target","value","display","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","useState","setValue","onChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useAsyncDebounce } from 'react-table';\nimport { Select, Search } from '../../../../components';\n\n\n\n\n\n\nexport const filterTypes = \n    () => React.memo(({\n      // Add a new fuzzyTextFilterFn filter type.\n      // fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),[])\n  \n\n\n    export function SelectColumnFilter({\n        userColumns: { filterValue, id, setFilter, preFilteredRows }\n      }) {\n    \n        // Calculate the options for filtering\n        // using the preFilteredRows\n        const options = React.useMemo(() => {\n          const options = new Set()\n          preFilteredRows.forEach(row => {\n            options.add(row.values[id])\n          })\n          return [...options.values()]\n        }, [ id, preFilteredRows])\n    \n    \n        // Capitalize 1st letter of the ID\n        let capitalizedId = id;\n        capitalizedId = capitalizedId[0].toUpperCase() + capitalizedId.substring(1);\n    \n    \n        // Render a multi-select box\n        return (\n\n            <Select\n            prompt={capitalizedId}\n            variation=\"outline\"\n            colorMode=\"dark\"\n            value={filterValue}\n            options={options}\n            onChange={e => {\n                console.log(e)\n              setFilter(e || undefined)\n            }}\n            />\n        //   <select\n        //     value={filterValue}\n        //     onChange={e => {\n        //         console.log(e.target.value)\n        //       setFilter(e.target.value || undefined)\n        //     }}\n        //   >\n        //     <option value=\"\">{capitalizedId}</option>\n        //     {options.map((option, i) => (\n        //       <option key={i} value={option}>\n        //         {option}\n        //       </option>\n        //     ))}\n        //   </select>\n        // )\n        )\n      }\n\n\n\n// Define a default UI for filtering\nexport function DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter }\n  }) {\n    const count = preFilteredRows.length\n  \n    return (\n      <input\n        value={filterValue || ''}\n        onChange={e => {\n          setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n        }}\n        placeholder={`Search ${count} records...`}\n        style={{\n            // Don't display the default filter UI when using global filter\n            display: 'none'\n        }}\n      />\n    )\n  }\n\n\n\n\n  // Define a default UI for global filtering\nexport function GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n  }) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n      setGlobalFilter(value || undefined)\n    }, 200)\n  \n    return (\n        <>\n        <Search\n            onChange={e => {\n            setValue(e.target.value);\n            onChange(e.target.value);\n        }} filterText={value || \"\"} />\n        </>\n    //   <span>\n    //     Buscar:{' '}\n    //     <input\n    //       value={value || \"\"}\n    //       onChange={e => {\n    //         setValue(e.target.value);\n    //         onChange(e.target.value);\n    //       }}\n    //       placeholder={`nome, cliente...`}\n    //       style={{\n    //         fontSize: '1rem',\n    //         border: '0',\n    //       }}\n    //     />\n    //   </span>\n    )\n  }\n  \n"]},"metadata":{},"sourceType":"module"}