{"ast":null,"code":"const express = require('express');\n\nconst Campaign = require('../models/campaign');\n\nconst router = new express.Router();\n\nconst auth = require('../middleware/auth');\n\nconst multer = require('multer');\n/**\n * Campaigns\n */\n// Create Campaign\n\n\nrouter.post('/campaigns', auth, async (req, res) => {\n  const campaign = new Campaign({ ...req.body,\n    owner: req.user._id\n  });\n\n  try {\n    await campaign.save();\n    res.status(201).send(campaign);\n  } catch (e) {\n    res.status(400).send(e);\n  }\n});\nconst upload = multer({\n  limits: {\n    fileSize: 1000000\n  },\n\n  fileFilter(req, file, cb) {\n    if (!file.originalname.match(/\\.(jpg|jpeg|png|pdf)$/)) {\n      return cb(new Error('Por favor, envie apenas arquivos no formato jpg ou png.'));\n    }\n\n    cb(undefined, true);\n  }\n\n}); // Update Campaign\n\nrouter.patch('/campaigns/:id', auth, async (req, res) => {\n  const updates = Object.keys(req.body);\n  const allowedUpdates = ['nome', 'cliente', 'campanha', 'status', 'dataDeVeiculacaoInicio', 'formatos', 'criativos', 'dataDeVeiculacaoFim'];\n  const isValidOperation = updates.every(update => allowedUpdates.includes(update));\n\n  if (!isValidOperation) {\n    res.status(404).send('Error: Invalid update');\n  }\n\n  try {\n    // Find by ID\n    // const _id = req.params.id\n    // const campaign = await Campaign.findByIdAndUpdate(_id)\n    // Find campaigns by Owner\n    const campaign = await Campaign.findOne({\n      _id: req.params.id,\n      owner: req.user._id\n    });\n    console.log(campaign);\n\n    if (!campaign) {\n      return res.status(404).send();\n    }\n\n    updates.forEach(update => {\n      if (update === 'formatos') {\n        return campaign[update].push(...req.body[update]);\n      }\n\n      return campaign[update] = req.body[update];\n    });\n    await campaign.save();\n    res.send(campaign);\n  } catch (e) {\n    res.status(400).send();\n  }\n}); // GET /campaigns\n\nrouter.get('/campaigns', auth, async (req, res) => {\n  const match = {}; // const sort = {}\n\n  if (req.query.status) {\n    match.status = req.query.status;\n  }\n\n  try {\n    await req.user.populate({\n      path: 'campaigns' // match,\n      // options: {\n      //     limit: parseInt(req.query.limit),\n      //     skip: parseInt(req.query.skip),\n      //     sort\n      // }\n\n    });\n    console.log(req.user.campaigns);\n    res.send(req.user.campaigns);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n}); // Read Campaign by ID\n\nrouter.get('/campaigns/:id', auth, async (req, res) => {\n  const _id = req.params.id;\n\n  try {\n    const campaign = await Campaign.findOne({\n      _id,\n      owner: req.user._id\n    });\n\n    if (!campaign) {\n      return res.status(404).send();\n    }\n\n    res.send(campaign);\n  } catch (e) {\n    res.status(500).send();\n  }\n}); // Delete Campaign\n\nrouter.delete('/campaigns/:id', auth, async (req, res) => {\n  try {\n    const campaign = await Campaign.findOneAndDelete({\n      _id: req.params.id,\n      owner: req.user._id\n    });\n\n    if (!campaign) {\n      return res.status(404).send();\n    }\n\n    res.send(campaign);\n  } catch (e) {\n    res.status(500).send();\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/server/src/routers/campaign.js"],"names":["express","require","Campaign","router","Router","auth","multer","post","req","res","campaign","body","owner","user","_id","save","status","send","e","upload","limits","fileSize","fileFilter","file","cb","originalname","match","Error","undefined","patch","updates","Object","keys","allowedUpdates","isValidOperation","every","update","includes","findOne","params","id","console","log","forEach","push","get","query","populate","path","campaigns","delete","findOneAndDelete","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAME,MAAM,GAAG,IAAIH,OAAO,CAACI,MAAZ,EAAf;;AACA,MAAMC,IAAI,GAAGJ,OAAO,CAAC,oBAAD,CAApB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAD,CAAtB;AAGA;AACA;AACA;AAGA;;;AACAE,MAAM,CAACI,IAAP,CAAY,YAAZ,EAA0BF,IAA1B,EAAgC,OAAOG,GAAP,EAAWC,GAAX,KAAmB;AAE/C,QAAMC,QAAQ,GAAG,IAAIR,QAAJ,CAAa,EAC1B,GAAGM,GAAG,CAACG,IADmB;AAE1BC,IAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASC;AAFU,GAAb,CAAjB;;AAMA,MAAI;AACA,UAAMJ,QAAQ,CAACK,IAAT,EAAN;AACAN,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBP,QAArB;AACH,GAHD,CAGE,OAAOQ,CAAP,EAAU;AACRT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,CAArB;AACH;AAEJ,CAfD;AAiBA,MAAMC,MAAM,GAAGb,MAAM,CAAC;AAClBc,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GADU;;AAIlBC,EAAAA,UAAU,CAACd,GAAD,EAAKe,IAAL,EAAUC,EAAV,EAAc;AACpB,QAAI,CAACD,IAAI,CAACE,YAAL,CAAkBC,KAAlB,CAAwB,uBAAxB,CAAL,EAAuD;AACnD,aAAOF,EAAE,CAAC,IAAIG,KAAJ,CAAU,yDAAV,CAAD,CAAT;AACH;;AACDH,IAAAA,EAAE,CAACI,SAAD,EAAW,IAAX,CAAF;AACH;;AATiB,CAAD,CAArB,C,CAYA;;AACAzB,MAAM,CAAC0B,KAAP,CAAa,gBAAb,EAA8BxB,IAA9B,EAAoC,OAAMG,GAAN,EAAUC,GAAV,KAAkB;AAElD,QAAMqB,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYxB,GAAG,CAACG,IAAhB,CAAhB;AACA,QAAMsB,cAAc,GAAG,CAAC,MAAD,EAAQ,SAAR,EAAkB,UAAlB,EAA6B,QAA7B,EAAsC,wBAAtC,EAAgE,UAAhE,EAA4E,WAA5E,EAAyF,qBAAzF,CAAvB;AACA,QAAMC,gBAAgB,GAAGJ,OAAO,CAACK,KAAR,CAAeC,MAAM,IAAIH,cAAc,CAACI,QAAf,CAAwBD,MAAxB,CAAzB,CAAzB;;AAEA,MAAI,CAACF,gBAAL,EAAuB;AACnBzB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACH;;AAED,MAAI;AACA;AACA;AACA;AACA;AACA,UAAMP,QAAQ,GAAG,MAAMR,QAAQ,CAACoC,OAAT,CAAiB;AAAExB,MAAAA,GAAG,EAAEN,GAAG,CAAC+B,MAAJ,CAAWC,EAAlB;AAAsB5B,MAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASC;AAAtC,KAAjB,CAAvB;AAEA2B,IAAAA,OAAO,CAACC,GAAR,CAAYhC,QAAZ;;AAEA,QAAI,CAACA,QAAL,EAAe;AACX,aAAOD,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACH;;AAEDa,IAAAA,OAAO,CAACa,OAAR,CAAgBP,MAAM,IAAI;AACtB,UAAIA,MAAM,KAAK,UAAf,EAA2B;AACvB,eAAO1B,QAAQ,CAAC0B,MAAD,CAAR,CAAiBQ,IAAjB,CAAsB,GAAGpC,GAAG,CAACG,IAAJ,CAASyB,MAAT,CAAzB,CAAP;AACH;;AAED,aAAO1B,QAAQ,CAAC0B,MAAD,CAAR,GAAmB5B,GAAG,CAACG,IAAJ,CAASyB,MAAT,CAA1B;AACH,KAND;AAQA,UAAM1B,QAAQ,CAACK,IAAT,EAAN;AACAN,IAAAA,GAAG,CAACQ,IAAJ,CAASP,QAAT;AAEH,GAxBD,CAwBE,OAAOQ,CAAP,EAAU;AACRT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACH;AAEJ,CAtCD,E,CAwCA;;AACAd,MAAM,CAAC0C,GAAP,CAAW,YAAX,EAAyBxC,IAAzB,EAA+B,OAAOG,GAAP,EAAWC,GAAX,KAAmB;AAE9C,QAAMiB,KAAK,GAAG,EAAd,CAF8C,CAG9C;;AAEA,MAAIlB,GAAG,CAACsC,KAAJ,CAAU9B,MAAd,EAAsB;AAClBU,IAAAA,KAAK,CAACV,MAAN,GAAeR,GAAG,CAACsC,KAAJ,CAAU9B,MAAzB;AACH;;AAGD,MAAI;AACA,UAAMR,GAAG,CAACK,IAAJ,CAASkC,QAAT,CAAkB;AACpBC,MAAAA,IAAI,EAAE,WADc,CAEpB;AACA;AACA;AACA;AACA;AACA;;AAPoB,KAAlB,CAAN;AASAP,IAAAA,OAAO,CAACC,GAAR,CAAYlC,GAAG,CAACK,IAAJ,CAASoC,SAArB;AAEAxC,IAAAA,GAAG,CAACQ,IAAJ,CAAST,GAAG,CAACK,IAAJ,CAASoC,SAAlB;AAEH,GAdD,CAcE,OAAO/B,CAAP,EAAU;AACRT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,CAArB;AACH;AAEJ,CA5BD,E,CA8BA;;AACAf,MAAM,CAAC0C,GAAP,CAAW,gBAAX,EAA6BxC,IAA7B,EAAmC,OAAOG,GAAP,EAAWC,GAAX,KAAmB;AAElD,QAAMK,GAAG,GAAGN,GAAG,CAAC+B,MAAJ,CAAWC,EAAvB;;AAEA,MAAI;AACA,UAAM9B,QAAQ,GAAG,MAAMR,QAAQ,CAACoC,OAAT,CAAiB;AAAExB,MAAAA,GAAF;AAAOF,MAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASC;AAAvB,KAAjB,CAAvB;;AACA,QAAI,CAACJ,QAAL,EAAe;AACX,aAAOD,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACH;;AACDR,IAAAA,GAAG,CAACQ,IAAJ,CAASP,QAAT;AACH,GAND,CAME,OAAOQ,CAAP,EAAU;AACRT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACH;AAEJ,CAdD,E,CAgBA;;AACAd,MAAM,CAAC+C,MAAP,CAAc,gBAAd,EAAgC7C,IAAhC,EAAsC,OAAOG,GAAP,EAAWC,GAAX,KAAmB;AAErD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMR,QAAQ,CAACiD,gBAAT,CAA0B;AAAErC,MAAAA,GAAG,EAAEN,GAAG,CAAC+B,MAAJ,CAAWC,EAAlB;AAAqB5B,MAAAA,KAAK,EAAEJ,GAAG,CAACK,IAAJ,CAASC;AAArC,KAA1B,CAAvB;;AAEA,QAAI,CAACJ,QAAL,EAAe;AACX,aAAOD,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACH;;AACDR,IAAAA,GAAG,CAACQ,IAAJ,CAASP,QAAT;AACH,GAPD,CAOE,OAAOQ,CAAP,EAAU;AACRT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACH;AACJ,CAZD;AAiBAmC,MAAM,CAACC,OAAP,GAAiBlD,MAAjB","sourcesContent":["const express = require('express')\nconst Campaign = require('../models/campaign')\nconst router = new express.Router()\nconst auth = require('../middleware/auth')\nconst multer = require('multer')\n\n\n/**\n * Campaigns\n */\n\n\n// Create Campaign\nrouter.post('/campaigns', auth, async (req,res) => {\n    \n    const campaign = new Campaign({\n        ...req.body,\n        owner: req.user._id\n    })\n\n\n    try {\n        await campaign.save()\n        res.status(201).send(campaign)\n    } catch (e) {\n        res.status(400).send(e)\n    }\n\n})\n\nconst upload = multer({\n    limits: {\n        fileSize: 1000000\n    },\n    fileFilter(req,file,cb) {\n        if (!file.originalname.match(/\\.(jpg|jpeg|png|pdf)$/)) {\n            return cb(new Error('Por favor, envie apenas arquivos no formato jpg ou png.'))\n        }\n        cb(undefined,true)\n    }\n})\n\n// Update Campaign\nrouter.patch('/campaigns/:id',auth, async(req,res) => {\n\n    const updates = Object.keys(req.body)\n    const allowedUpdates = ['nome','cliente','campanha','status','dataDeVeiculacaoInicio', 'formatos', 'criativos', 'dataDeVeiculacaoFim']\n    const isValidOperation = updates.every( update => allowedUpdates.includes(update) )\n\n    if (!isValidOperation) {\n        res.status(404).send('Error: Invalid update')\n    }\n\n    try {\n        // Find by ID\n        // const _id = req.params.id\n        // const campaign = await Campaign.findByIdAndUpdate(_id)\n        // Find campaigns by Owner\n        const campaign = await Campaign.findOne({ _id: req.params.id, owner: req.user._id})\n\n        console.log(campaign)\n   \n        if (!campaign) {\n            return res.status(404).send()\n        }\n\n        updates.forEach(update => {\n            if (update === 'formatos') {\n                return campaign[update].push(...req.body[update])\n            }\n\n            return campaign[update] = req.body[update]\n        })\n\n        await campaign.save()\n        res.send(campaign)\n\n    } catch (e) {\n        res.status(400).send()\n    }\n\n})\n\n// GET /campaigns\nrouter.get('/campaigns', auth, async (req,res) => {\n\n    const match = {}\n    // const sort = {}\n\n    if (req.query.status) {\n        match.status = req.query.status\n    }\n\n\n    try {\n        await req.user.populate({\n            path: 'campaigns',\n            // match,\n            // options: {\n            //     limit: parseInt(req.query.limit),\n            //     skip: parseInt(req.query.skip),\n            //     sort\n            // }\n        })\n        console.log(req.user.campaigns)\n\n        res.send(req.user.campaigns)\n\n    } catch (e) {\n        res.status(500).send(e)\n    }\n\n})\n\n// Read Campaign by ID\nrouter.get('/campaigns/:id', auth, async (req,res) => {\n\n    const _id = req.params.id\n\n    try {\n        const campaign = await Campaign.findOne({ _id, owner: req.user._id })\n        if (!campaign) {\n            return res.status(404).send()\n        }\n        res.send(campaign)\n    } catch (e) {\n        res.status(500).send()\n    }\n\n})\n\n// Delete Campaign\nrouter.delete('/campaigns/:id', auth, async (req,res) => {\n\n    try {\n        const campaign = await Campaign.findOneAndDelete({ _id: req.params.id,owner: req.user._id })\n\n        if (!campaign) {\n            return res.status(404).send()\n        }\n        res.send(campaign)\n    } catch (e) {\n        res.status(500).send()\n    }\n})\n\n\n\n\nmodule.exports = router"]},"metadata":{},"sourceType":"module"}