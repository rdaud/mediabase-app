{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst User = require('../models/user');\n\nconst auth = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization').replace('Bearer ', '');\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findOne({\n      _id: decoded._id,\n      'tokens.token': token\n    });\n\n    if (!user) {\n      throw new Error('Doesnt exist');\n    }\n\n    req.user = user;\n    req.token = token;\n    next();\n  } catch (e) {\n    res.status(401).send('Please authenticate.');\n  }\n};\n\nmodule.exports = auth;","map":{"version":3,"sources":["/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/server/src/middleware/auth.js"],"names":["jwt","require","User","auth","req","res","next","token","header","replace","decoded","verify","process","env","JWT_SECRET","user","findOne","_id","Error","e","status","send","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AAEA,MAAME,IAAI,GAAG,OAAOC,GAAP,EAAWC,GAAX,EAAeC,IAAf,KAAwB;AACjC,MAAI;AACA,UAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,eAAX,EAA4BC,OAA5B,CAAoC,SAApC,EAA8C,EAA9C,CAAd;AACA,UAAMC,OAAO,GAAGV,GAAG,CAACW,MAAJ,CAAWJ,KAAX,EAAkBK,OAAO,CAACC,GAAR,CAAYC,UAA9B,CAAhB;AACA,UAAMC,IAAI,GAAG,MAAMb,IAAI,CAACc,OAAL,CAAa;AAAEC,MAAAA,GAAG,EAAEP,OAAO,CAACO,GAAf;AAAoB,sBAAgBV;AAApC,KAAb,CAAnB;;AAEA,QAAI,CAACQ,IAAL,EAAW;AACP,YAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACH;;AAEDd,IAAAA,GAAG,CAACW,IAAJ,GAAWA,IAAX;AACAX,IAAAA,GAAG,CAACG,KAAJ,GAAYA,KAAZ;AACAD,IAAAA,IAAI;AAGP,GAdD,CAcE,OAAOa,CAAP,EAAU;AACRd,IAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB;AACH;AACJ,CAlBD;;AAoBAC,MAAM,CAACC,OAAP,GAAiBpB,IAAjB","sourcesContent":["const jwt = require('jsonwebtoken')\nconst User = require('../models/user')\n\nconst auth = async (req,res,next) => {\n    try {\n        const token = req.header('Authorization').replace('Bearer ','')\n        const decoded = jwt.verify(token, process.env.JWT_SECRET)\n        const user = await User.findOne({ _id: decoded._id, 'tokens.token': token })\n\n        if (!user) {\n            throw new Error('Doesnt exist')\n        }\n\n        req.user = user\n        req.token = token\n        next()\n\n\n    } catch (e) {\n        res.status(401).send('Please authenticate.')\n    }\n}\n\nmodule.exports = auth\n\n"]},"metadata":{},"sourceType":"module"}