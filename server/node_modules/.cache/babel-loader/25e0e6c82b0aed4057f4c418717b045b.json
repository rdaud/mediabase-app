{"ast":null,"code":"const mongoose = require('mongoose');\n\nconst validator = require('validator');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst Campaign = require('./campaign');\n/**\n * Create User\n */\n\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n    trim: true,\n    lowercase: true,\n\n    validate(value) {\n      if (!validator.isEmail(value)) {\n        throw new Error('O email informado está formatado incorretamente.');\n      }\n    }\n\n  },\n  password: {\n    type: String,\n    required: true,\n    trim: true,\n    minLength: 6\n  },\n  avatar: {\n    type: Buffer\n  },\n  tokens: [{\n    token: {\n      type: String,\n      required: true\n    }\n  }]\n}, {\n  timestamps: true\n}); // \n\nuserSchema.virtual('campaigns', {\n  ref: 'Campaign',\n  localField: '_id',\n  foreignField: 'owner'\n}); // Delete user tasks when user is removed\n\nuserSchema.pre('remove', async function (next) {\n  const user = this;\n  await Campaign.deleteMany({\n    owner: user._id\n  });\n  next();\n}); // Generate Authorization Token\n\nuserSchema.methods.generateAuthToken = async function () {\n  const user = this;\n  const token = jwt.sign({\n    _id: user._id.toString()\n  }, process.env.JWT_SECRET);\n  user.tokens = user.tokens.concat({\n    token\n  });\n  await user.save();\n  return token;\n}; // Public Profile\n\n\nuserSchema.methods.toJSON = function () {\n  const user = this;\n  const userObject = user.toObject();\n  delete userObject.password;\n  delete userObject.tokens;\n  return userObject;\n}; // Validate user credentials\n\n\nuserSchema.statics.findByCredentials = async (email, password) => {\n  // 1st find the user by email\n  const user = await User.findOne({\n    email\n  }); // 2nd check if this user exist\n\n  if (!user) {\n    throw new Error('Unable to login');\n  } // 3rd check if the password provided matches with the stored one\n\n\n  const isMatch = await bcrypt.compare(password, user.password);\n\n  if (!isMatch) {\n    throw new Error('Unable to login');\n  } // 4th return the user if everything was validated\n\n\n  return user;\n}; // Hash the plain text password before saving\n\n\nuserSchema.pre('save', async function (next) {\n  const user = this;\n\n  if (user.isModified('password')) {\n    user.password = await bcrypt.hash(user.password, 8);\n  }\n\n  next();\n});\nconst User = mongoose.model('User', userSchema);\nmodule.exports = User;","map":{"version":3,"sources":["/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/server/src/models/user.js"],"names":["mongoose","require","validator","bcrypt","jwt","Campaign","userSchema","Schema","name","type","String","required","trim","email","unique","lowercase","validate","value","isEmail","Error","password","minLength","avatar","Buffer","tokens","token","timestamps","virtual","ref","localField","foreignField","pre","next","user","deleteMany","owner","_id","methods","generateAuthToken","sign","toString","process","env","JWT_SECRET","concat","save","toJSON","userObject","toObject","statics","findByCredentials","User","findOne","isMatch","compare","isModified","hash","model","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose')\nconst validator = require('validator')\nconst bcrypt = require('bcryptjs')\nconst jwt = require('jsonwebtoken')\nconst Campaign = require('./campaign')\n\n/**\n * Create User\n */\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    email: {\n        type: String,\n        unique: true,\n        required: true,\n        trim: true,\n        lowercase: true,\n        validate(value) {\n            if (!validator.isEmail(value)) {\n                throw new Error('O email informado está formatado incorretamente.')\n            }\n        }\n    },\n    password: {\n        type: String,\n        required: true,\n        trim: true,\n        minLength: 6\n    },\n    avatar: {\n        type: Buffer\n    },\n    tokens: [{\n        token: {\n            type: String,\n            required: true\n        }\n    }]   \n},\n{\n    timestamps: true\n})\n\n// \nuserSchema.virtual('campaigns', {\n    ref: 'Campaign',\n    localField: '_id',\n    foreignField: 'owner'\n})\n\n// Delete user tasks when user is removed\nuserSchema.pre('remove', async function(next) {\n    const user = this\n    await Campaign.deleteMany({ owner: user._id })\n    next()\n})\n\n// Generate Authorization Token\nuserSchema.methods.generateAuthToken = async function() {\n    const user = this\n    const token = jwt.sign({ _id: user._id.toString()}, process.env.JWT_SECRET)\n\n    user.tokens = user.tokens.concat({ token })\n    await user.save()\n\n    return token\n}\n\n// Public Profile\nuserSchema.methods.toJSON = function() {\n    const user = this\n    const userObject = user.toObject()\n\n    delete userObject.password\n    delete userObject.tokens\n\n    return userObject\n}\n\n\n// Validate user credentials\nuserSchema.statics.findByCredentials = async (email,password) => {\n    \n    // 1st find the user by email\n    const user = await User.findOne({ email })\n\n\n    // 2nd check if this user exist\n    if (!user) {\n        throw new Error('Unable to login')\n    }\n\n    // 3rd check if the password provided matches with the stored one\n    const isMatch = await bcrypt.compare(password,user.password)\n\n\n    if (!isMatch) {\n        throw new Error('Unable to login')\n    }\n\n    // 4th return the user if everything was validated\n    return user\n}\n\n// Hash the plain text password before saving\nuserSchema.pre('save', async function(next) {\n    const user = this\n\n    if (user.isModified('password')) {\n        user.password = await bcrypt.hash(user.password,8)\n    }\n\n    next()\n})\n\nconst User = mongoose.model('User',userSchema)\n\n\nmodule.exports = User"]},"metadata":{},"sourceType":"module"}