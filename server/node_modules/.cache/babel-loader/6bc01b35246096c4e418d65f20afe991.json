{"ast":null,"code":"import _objectSpread from\"/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{useDispatch,useSelector}from'react-redux';import{Modal}from'../../../../components';import{AddFormatsTable}from'./pageComponents';import{jsx as _jsx}from\"react/jsx-runtime\";export var AddFormatModal=function AddFormatModal(_ref){var handleClickOnCloseButton=_ref.handleClickOnCloseButton;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var dispatch=useDispatch();var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),hasSelectedRows=_useState4[0],setHasSelectedRows=_useState4[1];var _useSelector=useSelector(function(state){return state.formatos;}),formatos=_useSelector.formatos;var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),count=_useState6[0],setCount=_useState6[1];var handleSelectedRows=function handleSelectedRows(_ref2){var selectedRows=_ref2.selectedRows;if(selectedRows.length>0){setHasSelectedRows(true);setCount(selectedRows.length);setData(selectedRows);}else{setHasSelectedRows(false);}console.log(data);};var filteredItems=formatos.map(function(item,index){return _objectSpread({id:item.id},item.fields);});return/*#__PURE__*/_jsx(Modal,{headerTitle:\"Adicionar formatos\",handleClickOnCloseButton:handleClickOnCloseButton,children:/*#__PURE__*/_jsx(AddFormatsTable,{data:filteredItems})});};","map":{"version":3,"sources":["/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/client/src/pages/Campaign/pageComponents/AddFormatModal/index.jsx"],"names":["React","useState","useDispatch","useSelector","Modal","AddFormatsTable","AddFormatModal","handleClickOnCloseButton","data","setData","dispatch","hasSelectedRows","setHasSelectedRows","state","formatos","count","setCount","handleSelectedRows","selectedRows","length","console","log","filteredItems","map","item","index","id","fields"],"mappings":"yRAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,OAASC,KAAT,KAAsB,wBAAtB,CACA,OAASC,eAAT,KAAgC,kBAAhC,C,2CAKA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAkC,IAA/BC,CAAAA,wBAA+B,MAA/BA,wBAA+B,CAG5D,cAA0BN,QAAQ,CAAC,EAAD,CAAlC,wCAAQO,IAAR,eAAcC,OAAd,eACA,GAAMC,CAAAA,QAAQ,CAAGR,WAAW,EAA5B,CACA,eAAgDD,QAAQ,CAAC,KAAD,CAAxD,yCAAQU,eAAR,eAAyBC,kBAAzB,eACA,iBAAqBT,WAAW,CAAE,SAAAU,KAAK,QAAIA,CAAAA,KAAK,CAACC,QAAV,EAAP,CAAhC,CAAQA,QAAR,cAAQA,QAAR,CACA,eAA4Bb,QAAQ,CAAC,IAAD,CAApC,yCAAQc,KAAR,eAAeC,QAAf,eAIA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,OAAsB,IAAnBC,CAAAA,YAAmB,OAAnBA,YAAmB,CAC7C,GAAIA,YAAY,CAACC,MAAb,CAAsB,CAA1B,CAA6B,CACzBP,kBAAkB,CAAC,IAAD,CAAlB,CACAI,QAAQ,CAACE,YAAY,CAACC,MAAd,CAAR,CACAV,OAAO,CAACS,YAAD,CAAP,CACH,CAJD,IAIO,CACHN,kBAAkB,CAAC,KAAD,CAAlB,CACH,CACDQ,OAAO,CAACC,GAAR,CAAYb,IAAZ,EAEH,CAVD,CAaA,GAAMc,CAAAA,aAAa,CAAGR,QAAQ,CAACS,GAAT,CAAa,SAACC,IAAD,CAAMC,KAAN,CAAgB,CAC/C,sBAASC,EAAE,CAAEF,IAAI,CAACE,EAAlB,EAA0BF,IAAI,CAACG,MAA/B,EACH,CAFqB,CAAtB,CAKA,mBACI,KAAC,KAAD,EAAO,WAAW,CAAC,oBAAnB,CAAwC,wBAAwB,CAAGpB,wBAAnE,uBACI,KAAC,eAAD,EAAiB,IAAI,CAAEe,aAAvB,EADJ,EADJ,CAKH,CAlCM","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Modal } from '../../../../components'\nimport { AddFormatsTable } from './pageComponents'\n\n\n\n\nexport const AddFormatModal = ({ handleClickOnCloseButton }) => {\n\n\n    const [ data, setData ] = useState([])\n    const dispatch = useDispatch()\n    const [ hasSelectedRows, setHasSelectedRows ] = useState(false)\n    const { formatos } = useSelector( state => state.formatos )\n    const [ count, setCount ] = useState(null)\n\n \n\n    const handleSelectedRows = ({ selectedRows }) => {\n        if (selectedRows.length > 0) {\n            setHasSelectedRows(true)\n            setCount(selectedRows.length)\n            setData(selectedRows)\n        } else {\n            setHasSelectedRows(false)\n        }\n        console.log(data)\n\n    }\n\n\n    const filteredItems = formatos.map((item,index) => {\n        return { id: item.id , ...item.fields}\n    });\n\n\n    return (\n        <Modal headerTitle=\"Adicionar formatos\" handleClickOnCloseButton={ handleClickOnCloseButton }>\n            <AddFormatsTable data={filteredItems} />\n        </Modal>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}