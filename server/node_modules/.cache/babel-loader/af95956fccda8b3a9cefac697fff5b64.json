{"ast":null,"code":"const express = require('express');\n\nconst User = require('../models/user');\n\nconst router = new express.Router();\n\nconst auth = require('../middleware/auth');\n\nconst multer = require('multer');\n\nconst {\n  restart\n} = require('nodemon');\n/**\n * Users\n */\n// Create User\n\n\nrouter.post('/users', async (req, res) => {\n  const user = new User(req.body);\n\n  try {\n    await user.save();\n    const token = await user.generateAuthToken();\n    res.status(201).send({\n      user,\n      token\n    });\n  } catch (e) {\n    res.status(400).send(e);\n  }\n}); // Login User\n\nrouter.post('/users/login', async (req, res) => {\n  try {\n    console.log('testing');\n    const user = await User.findByCredentials(req.body.email, req.body.password);\n    const token = await user.generateAuthToken();\n    res.send({\n      user,\n      token\n    });\n  } catch (e) {\n    res.status(400).send();\n  }\n}); // Logout User\n\nrouter.post('/users/logout', auth, async (req, res) => {\n  try {\n    req.user.tokens = req.user.tokens.filter(token => {\n      return token.token !== req.token;\n    });\n    await req.user.save();\n    res.status(201).send();\n  } catch (e) {\n    res.status(500).send();\n  }\n}); // Logout User of All Sessions\n\nrouter.post('/users/logoutAll', auth, async (req, res) => {\n  try {\n    req.user.tokens = [];\n    await req.user.save();\n    res.send();\n  } catch (e) {\n    res.status(500).send();\n  }\n}); // Update Profile\n\nrouter.patch('/users/me', auth, async (req, res) => {\n  const updates = Object.keys(req.body);\n  const allowedUpdates = ['name', 'email', 'password'];\n  const isValidOperation = updates.every(update => allowedUpdates.includes(update));\n\n  if (!isValidOperation) {\n    return res.status(404).send('Error: Invalid update');\n  }\n\n  try {\n    updates.forEach(update => req.user[update] = req.body[update]);\n    await req.user.save();\n    res.send(req.user);\n  } catch (e) {\n    res.status(400).send(e);\n  }\n}); // Read Profile\n\nrouter.get('/users/me', auth, async (req, res) => {\n  res.send(req.user);\n}); // Delete User\n\nrouter.delete('/users/me', auth, async (req, res) => {\n  try {\n    await req.user.remove();\n    res.send(req.user);\n  } catch (e) {\n    res.status(500).send();\n  }\n});\nconst upload = multer({\n  limits: {\n    fileSize: 1000000\n  },\n\n  fileFilter(req, file, cb) {\n    if (!file.originalname.match(/\\.(jpg|jpeg|png|pdf)$/)) {\n      return cb(new Error('Por favor, envie apenas arquivos no formato jpg ou png.'));\n    }\n\n    cb(undefined, true);\n  }\n\n}); // Upload avatar image\n\nrouter.post('/users/me/avatar', auth, upload.single('avatar'), async (req, res) => {\n  req.user.avatar = req.file.buffer;\n  await req.user.save();\n  res.send();\n}, (error, req, res, next) => {\n  res.status(400).send({\n    error: error.message\n  });\n}); // Read avatar image\n\nrouter.get('/users/:id/avatar', async (req, res) => {\n  try {\n    const user = await User.findById(req.params.id);\n\n    if (!user || !user.avatar) {\n      throw new Error();\n    }\n\n    res.set('Content-Type', 'image/jpg');\n    res.send(user.avatar);\n  } catch (e) {\n    res.status(404).send();\n  }\n}); // Delete avatar image\n\nrouter.delete('/users/me/avatar', auth, async (req, res) => {\n  req.user.avatar = undefined;\n  await req.user.save();\n  res.send();\n});\nmodule.exports = router;","map":{"version":3,"sources":["/Users/rodrigodaudskeff/Desktop/Mediabase/mediabase-app/server/src/routers/user.js"],"names":["express","require","User","router","Router","auth","multer","restart","post","req","res","user","body","save","token","generateAuthToken","status","send","e","console","log","findByCredentials","email","password","tokens","filter","patch","updates","Object","keys","allowedUpdates","isValidOperation","every","update","includes","forEach","get","delete","remove","upload","limits","fileSize","fileFilter","file","cb","originalname","match","Error","undefined","single","avatar","buffer","error","next","message","findById","params","id","set","module","exports"],"mappings":"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","sourcesContent":["const express = require('express')\nconst User = require('../models/user')\nconst router = new express.Router()\nconst auth = require('../middleware/auth')\nconst multer = require('multer')\nconst { restart } = require('nodemon')\n\n/**\n * Users\n */\n\n// Create User\nrouter.post('/users', async (req,res) => {\n    \n    const user = new User(req.body)\n    try {\n        await user.save()\n        const token = await user.generateAuthToken()\n        res.status(201).send({user,token})\n    } catch (e) {\n        res.status(400).send(e)\n    }\n\n})\n\n// Login User\nrouter.post('/users/login', async (req,res) => {\n    try {\n        console.log('testing')\n\n        const user = await User.findByCredentials(req.body.email,req.body.password)\n        const token = await user.generateAuthToken()\n        res.send({user,token})\n\n    } catch (e) {\n        res.status(400).send()\n    }\n})\n\n// Logout User\nrouter.post('/users/logout', auth, async(req,res) => {\n    try {\n        req.user.tokens = req.user.tokens.filter((token) => {\n            return token.token !== req.token\n        })\n        await req.user.save()\n        res.status(201).send()\n    } catch (e) {\n        res.status(500).send()\n    }\n} )\n\n// Logout User of All Sessions\nrouter.post('/users/logoutAll', auth, async(req,res) => {\n    try {\n        req.user.tokens = []\n        await req.user.save()\n        res.send()\n    } catch (e) {\n        res.status(500).send()\n    }\n} )\n\n\n// Update Profile\nrouter.patch('/users/me', auth, async (req,res) => {\n    \n    const updates = Object.keys(req.body)\n    const allowedUpdates = ['name','email','password']\n    const isValidOperation = updates.every((update) => allowedUpdates.includes(update))\n\n    if (!isValidOperation) {\n        return res.status(404).send('Error: Invalid update')\n    }\n\n    try {\n        updates.forEach(update => req.user[update] = req.body[update])\n        await req.user.save()\n\n        res.send(req.user)\n\n    } catch (e) {\n        res.status(400).send(e)\n    }\n\n})\n\n// Read Profile\nrouter.get('/users/me', auth, async (req,res) => {\n\n  res.send(req.user)\n\n})\n\n// Delete User\nrouter.delete('/users/me', auth, async (req,res) => {\n    try {\n        await req.user.remove()\n        res.send(req.user)\n\n    } catch (e) {\n        res.status(500).send()\n    }\n})\n\nconst upload = multer({\n    limits: {\n        fileSize: 1000000\n    },\n    fileFilter(req,file,cb) {\n        if (!file.originalname.match(/\\.(jpg|jpeg|png|pdf)$/)) {\n            return cb(new Error('Por favor, envie apenas arquivos no formato jpg ou png.'))\n        }\n        cb(undefined,true)\n    }\n})\n\n\n\n\n// Upload avatar image\nrouter.post('/users/me/avatar', auth, upload.single('avatar'), async (req,res) => {\n    req.user.avatar = req.file.buffer\n    await req.user.save()\n    res.send()\n}, (error,req,res,next) => {\n    res.status(400).send({ error: error.message })\n})\n\n// Read avatar image\nrouter.get('/users/:id/avatar', async (req,res) => {\n    try {\n        const user = await User.findById(req.params.id)\n\n        if (!user || !user.avatar) {\n            throw new Error()\n        }\n\n        res.set('Content-Type', 'image/jpg')\n        res.send(user.avatar)\n        \n    } catch (e) {\n        res.status(404).send()\n    }\n})\n\n// Delete avatar image\nrouter.delete('/users/me/avatar', auth, async (req,res) => {\n    req.user.avatar = undefined\n    await req.user.save()\n    res.send()\n})\n\n\nmodule.exports = router"]},"metadata":{},"sourceType":"module"}